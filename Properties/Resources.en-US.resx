<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="alreadyupdatedText" xml:space="preserve">
    <value>yt-dlp.exe Already Updated.</value>
  </data>
  <data name="copyURL" xml:space="preserve">
    <value>Copy URL</value>
  </data>
  <data name="doformatselectionText" xml:space="preserve">
    <value>Please Make Format Selection.</value>
  </data>
  <data name="downloadCompleteMessage" xml:space="preserve">
    <value>Download process completed successfully.</value>
  </data>
  <data name="downloadcompleteText" xml:space="preserve">
    <value>Download Complete</value>
  </data>
  <data name="downloadError" xml:space="preserve">
    <value>Download Error</value>
  </data>
  <data name="downloadLocationText" xml:space="preserve">
    <value>Download Location:</value>
  </data>
  <data name="downloads" xml:space="preserve">
    <value>Downloads</value>
  </data>
  <data name="downloadText" xml:space="preserve">
    <value>Download</value>
  </data>
  <data name="enteratleastone" xml:space="preserve">
    <value>Please enter at least one value.</value>
  </data>
  <data name="entersongpodcasturl" xml:space="preserve">
    <value>Please enter the name of the song/podcast:</value>
  </data>
  <data name="enterTextMessage" xml:space="preserve">
    <value>Please enter the name of the song/podcast:</value>
  </data>
  <data name="enteryoutubelinkText" xml:space="preserve">
    <value>Please enter a YouTube link.</value>
  </data>
  <data name="episodenumber" xml:space="preserve">
    <value>Episode Completed</value>
  </data>
  <data name="error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="fileNaming" xml:space="preserve">
    <value>File Naming</value>
  </data>
  <data name="filenamingText" xml:space="preserve">
    <value>File Naming</value>
  </data>
  <data name="folderNotFoundText" xml:space="preserve">
    <value>Download Folder Not Found.</value>
  </data>
  <data name="howManyText" xml:space="preserve">
    <value>How Many:</value>
  </data>
  <data name="inputcorrectint" xml:space="preserve">
    <value>Please enter a valid number.</value>
  </data>
  <data name="moviecompleted" xml:space="preserve">
    <value>Movie Completed</value>
  </data>
  <data name="moviename" xml:space="preserve">
    <value>Movie Name:</value>
  </data>
  <data name="movieseriesaudioformat" xml:space="preserve">
    <value>. Episode/Movie Audio File Link:</value>
  </data>
  <data name="movieserieskeyformat" xml:space="preserve">
    <value>. Episode/Movie Key:</value>
  </data>
  <data name="movieseriesvideoformat" xml:space="preserve">
    <value>. Episode/Movie Video File Link:</value>
  </data>
  <data name="movieText" xml:space="preserve">
    <value>Movie</value>
  </data>
  <data name="movieyear" xml:space="preserve">
    <value>Movie Year:</value>
  </data>
  <data name="musicDownloadErrorText" xml:space="preserve">
    <value>Song download error</value>
  </data>
  <data name="noUpdate" xml:space="preserve">
    <value>No Update</value>
  </data>
  <data name="openText" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="playlistText" xml:space="preserve">
    <value>Download Playlist?</value>
  </data>
  <data name="pleasecheckapp" xml:space="preserve">
    <value>Please Check the Application.</value>
  </data>
  <data name="processCompleteText" xml:space="preserve">
    <value>Process Completed</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>MediaHarbor is a simple and user-friendly application used to download and organize media content from various platforms such as YouTube, Disney, and Spotify.

1. Select Download Location:

Click the "Select Folder" button to choose the folder where downloaded media files will be saved.
Media Download:

2. YouTube:

Switch to the "General" tab to download YouTube videos.
Paste the URL of the video or song into the "YouTube URL" field.
Click the "Download" button to download the media.
3. Disney:

Enter the required information to download Disney+ content.
For series or movie downloads, you can enter audio, video, and key information for each episode.
You can merge audio and video files to create a final media file.
Spotify:

4. You can use it to download podcasts or music (Usage is available on GitHub).
Enter the necessary information for the desired number of podcasts or songs.
Once the download process is complete, you can find the audio files in the designated folder.
Automatic Update (Optional):

5. General Tab Usage Notes:

Use the "General" tab to download media content from platforms like YouTube, Vimeo, Dailymotion, Bilibili, CNN, ESPN, Flickr, Google Drive, and many others.</value>
  </data>
  <data name="saveLocationText" xml:space="preserve">
    <value>Download Location</value>
  </data>
  <data name="searchText" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="selectDownloadLocationText" xml:space="preserve">
    <value>Please Select Download Location First!</value>
  </data>
  <data name="selectdownloadlocfirst" xml:space="preserve">
    <value>Please Select Download Location First!</value>
  </data>
  <data name="selectFolderText" xml:space="preserve">
    <value>Select Folder</value>
  </data>
  <data name="selectQuality" xml:space="preserve">
    <value>Select an Quality First!</value>
  </data>
  <data name="seriesname" xml:space="preserve">
    <value>Series Name:</value>
  </data>
  <data name="seriesseason" xml:space="preserve">
    <value>Season No:</value>
  </data>
  <data name="seriesstartep" xml:space="preserve">
    <value>Start Episode:</value>
  </data>
  <data name="seriesText" xml:space="preserve">
    <value>Series</value>
  </data>
  <data name="shutdownPCText" xml:space="preserve">
    <value>Shut Down Computer After Process?</value>
  </data>
  <data name="shuttingdownText" xml:space="preserve">
    <value>Shutting Down Computer</value>
  </data>
  <data name="song" xml:space="preserve">
    <value>Song</value>
  </data>
  <data name="songkey" xml:space="preserve">
    <value>Song / Podcast Key</value>
  </data>
  <data name="songurl" xml:space="preserve">
    <value>Song / Podcast URL:</value>
  </data>
  <data name="startText" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="updateCompleted" xml:space="preserve">
    <value>Update Completed</value>
  </data>
  <data name="updateCompletedMessage" xml:space="preserve">
    <value>Update Completed. Now you can use the application.</value>
  </data>
  <data name="updateError" xml:space="preserve">
    <value>Update Error</value>
  </data>
  <data name="updatingPleaseWait" xml:space="preserve">
    <value>Updating, Please Wait!</value>
  </data>
  <data name="youtubeSearch" xml:space="preserve">
    <value>YouTube Search</value>
  </data>
  <data name="yt-dlpAutoUpdateText" xml:space="preserve">
    <value>Should yt-dlp update automatically?</value>
  </data>
  <data name="ytdlpUpdate" xml:space="preserve">
    <value>yt-dlp.exe Update</value>
  </data>
</root>